const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';

// –ü—Ä–æ—Å—Ç—ã–µ —Å–µ–∫—Ü–∏–∏ –±–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞
const sectionsData = [
  {
    name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    slug: 'tools',
    description: '–ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI',
    icon: 'üõ†Ô∏è',
    order: 1
  },
  {
    name: '–ò–∑—É—á–∏—Ç—å',
    slug: 'learn',
    description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    icon: 'üìö',
    order: 2
  },
  {
    name: '–í–Ω–µ–¥—Ä–∏—Ç—å',
    slug: 'implement',
    description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é',
    icon: 'üöÄ',
    order: 3
  }
];

async function createSection(sectionData) {
  try {
    const payload = {
      data: {
        name: sectionData.name,
        slug: sectionData.slug,
        description: sectionData.description,
        icon: sectionData.icon,
        order: sectionData.order,
        publishedAt: new Date().toISOString()
      }
    };

    const response = await axios.post(
      `${STRAPI_URL}/api/sections`,
      payload,
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    console.log(`‚úÖ Created section: ${sectionData.name}`);
    return response.data.data.id;
  } catch (error) {
    console.error(`‚ùå Error creating section ${sectionData.name}:`, error.response?.data || error.message);
    return null;
  }
}

async function populateSections() {
  console.log('üöÄ Starting simple sections population...');
  
  try {
    for (const sectionData of sectionsData) {
      await createSection(sectionData);
    }

    console.log('‚úÖ All sections populated successfully!');
  } catch (error) {
    console.error('‚ùå Error during population:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
populateSections();
