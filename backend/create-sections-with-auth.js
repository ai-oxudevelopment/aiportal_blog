const axios = require('axios');

const STRAPI_URL = process.env.STRAPI_URL || 'http://localhost:1337';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
const ADMIN_EMAIL = process.env.STRAPI_ADMIN_EMAIL || 'admin@example.com';
const ADMIN_PASSWORD = process.env.STRAPI_ADMIN_PASSWORD || 'admin123';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
const sectionsData = [
  // –ì–ª–∞–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
  {
    name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    slug: 'tools',
    description: '–ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI',
    icon: 'üõ†Ô∏è',
    order: 1,
    sectionType: 'main',
    subsections: [
      {
        name: '–ì–æ—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        slug: 'ready-instructions',
        description: '–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á',
        icon: 'üìã',
        order: 1
      },
      {
        name: 'AI-–∞–≥–µ–Ω—Ç—ã',
        slug: 'ai-agents',
        description: '–ì–æ—Ç–æ–≤—ã–µ AI-–∞–≥–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
        icon: 'ü§ñ',
        order: 2
      },
      {
        name: 'MCP',
        slug: 'mcp',
        description: 'Model Context Protocol –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
        icon: 'üîó',
        order: 3
      }
    ]
  },
  {
    name: '–ò–∑—É—á–∏—Ç—å',
    slug: 'learn',
    description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    icon: 'üìö',
    order: 2,
    sectionType: 'main',
    subsections: [
      {
        name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
        slug: 'research',
        description: '–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
        icon: 'üî¨',
        order: 1
      },
      {
        name: '–í–∏–¥–µ–æ–∫—É—Ä—Å—ã',
        slug: 'video-courses',
        description: '–û–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ –∏ –∫—É—Ä—Å—ã',
        icon: 'üé•',
        order: 2
      },
      {
        name: '–£—á–µ–±–Ω—ã–µ —Å—Ç–∞—Ç—å–∏',
        slug: 'tutorials',
        description: '–ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        icon: 'üìñ',
        order: 3
      },
      {
        name: 'UseCases –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        slug: 'platform-usecases',
        description: '–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        icon: 'üí°',
        order: 4
      }
    ]
  },
  {
    name: '–í–Ω–µ–¥—Ä–∏—Ç—å',
    slug: 'implement',
    description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é',
    icon: 'üöÄ',
    order: 3,
    sectionType: 'main',
    subsections: [
      {
        name: '–ò—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞',
        slug: 'success-stories',
        description: '–†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è',
        icon: 'üèÜ',
        order: 1
      },
      {
        name: '–ì–∞–π–¥—ã',
        slug: 'guides',
        description: '–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é',
        icon: 'üìù',
        order: 2
      }
    ]
  }
];

async function getAuthToken() {
  try {
    const response = await axios.post(`${STRAPI_URL}/admin/auth/local`, {
      email: ADMIN_EMAIL,
      password: ADMIN_PASSWORD
    });
    
    return response.data.token;
  } catch (error) {
    console.error('‚ùå Error getting auth token:', error.response?.data || error.message);
    return null;
  }
}

async function createSection(sectionData, parentId = null, token) {
  try {
    const payload = {
      data: {
        name: sectionData.name,
        slug: sectionData.slug,
        description: sectionData.description,
        icon: sectionData.icon,
        order: sectionData.order,
        sectionType: sectionData.sectionType || 'sub',
        publishedAt: new Date().toISOString()
      }
    };

    if (parentId) {
      payload.data.parentSection = parentId;
    }

    const response = await axios.post(
      `${STRAPI_URL}/api/sections`,
      payload,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log(`‚úÖ Created section: ${sectionData.name}`);
    return response.data.data.id;
  } catch (error) {
    console.error(`‚ùå Error creating section ${sectionData.name}:`, error.response?.data || error.message);
    return null;
  }
}

async function populateSections() {
  console.log('üöÄ Starting sections population with authentication...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = await getAuthToken();
    if (!token) {
      console.error('‚ùå Failed to get authentication token');
      process.exit(1);
    }
    
    console.log('‚úÖ Authentication successful');

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    const mainSections = [];
    for (const sectionData of sectionsData) {
      const sectionId = await createSection(sectionData, null, token);
      if (sectionId) {
        mainSections.push({ id: sectionId, subsections: sectionData.subsections });
      }
    }

    // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–µ–∫—Ü–∏–∏
    for (const mainSection of mainSections) {
      if (mainSection.subsections) {
        for (const subsectionData of mainSection.subsections) {
          await createSection(subsectionData, mainSection.id, token);
        }
      }
    }

    console.log('‚úÖ All sections populated successfully!');
  } catch (error) {
    console.error('‚ùå Error during population:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
populateSections();
