const axios = require('axios');

const STRAPI_URL = 'http://localhost:1337';

const sections = [
  {
    name: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    slug: 'tools'
  },
  {
    name: '–ò–∑—É—á–∏—Ç—å', 
    slug: 'learn'
  },
  {
    name: '–í–Ω–µ–¥—Ä–∏—Ç—å',
    slug: 'implement'
  }
];

async function createSections() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π –≤ Strapi...');
  
  for (const section of sections) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞—é —Å–µ–∫—Ü–∏—é: ${section.name}`);
      
      const response = await axios.post(`${STRAPI_URL}/api/sections`, {
        data: {
          name: section.name,
          slug: section.slug,
          publishedAt: new Date().toISOString()
        }
      });
      
      console.log(`‚úÖ –°–µ–∫—Ü–∏—è "${section.name}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
    } catch (error) {
      if (error.response?.status === 400 && error.response?.data?.error?.message?.includes('already exists')) {
        console.log(`‚ö†Ô∏è  –°–µ–∫—Ü–∏—è "${section.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ "${section.name}":`, error.response?.data || error.message);
      }
    }
  }
  
  console.log('üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Strapi Admin: http://localhost:1337/admin');
}

createSections().catch(console.error);
